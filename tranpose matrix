#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1024  // Define matrix size

void transpose(double *B, double *B_T, int n) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            B_T[j * n + i] = B[i * n + j];
}

void matrix_multiply(double *A, double *B, double *C, int n) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            double sum = 0;
            for (int k = 0; k < n; k++) {
                sum += A[i * n + k] * B[k * n + j];
            }
            C[i * n + j] = sum;
        }
    }
}

void matrix_multiply_transposed(double *A, double *B_T, double *C, int n) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            double sum = 0;
            for (int k = 0; k < n; k++) {
                sum += A[i * n + k] * B_T[j * n + k];
            }
            C[i * n + j] = sum;
        }
    }
}

int main() {
    int n = N;
    double *A = (double*)malloc(n * n * sizeof(double));
    double *B = (double*)malloc(n * n * sizeof(double));
    double *C = (double*)malloc(n * n * sizeof(double));
    double *B_T = (double*)malloc(n * n * sizeof(double));

    // Initialize matrices A and B with some values
    for (int i = 0; i < n * n; i++) {
        A[i] = 1.0;
        B[i] = 2.0;
    }

    // Transpose B matrix
    double start_time = omp_get_wtime();
    transpose(B, B_T, n);
    double transpose_time = omp_get_wtime() - start_time;

    // Measure performance of normal matrix multiplication
    start_time = omp_get_wtime();
    matrix_multiply(A, B, C, n);
    double multiply_time = omp_get_wtime() - start_time;

    // Measure performance of matrix multiplication with transposed B
    start_time = omp_get_wtime();
    matrix_multiply_transposed(A, B_T, C, n);
    double multiply_transpose_time = omp_get_wtime() - start_time;

    printf("Transpose Time: %f seconds\n", transpose_time);
    printf("Matrix Multiply Time (no transpose): %f seconds\n", multiply_time);
    printf("Matrix Multiply Time (with transpose): %f seconds\n", multiply_transpose_time);

    // Free allocated memory
    free(A);
    free(B);
    free(C);
    free(B_T);

    return 0;
}
